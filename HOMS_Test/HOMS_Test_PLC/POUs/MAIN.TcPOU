<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{d73f6033-1c1a-47a8-be0f-3a700ab10cd1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	
	//x_up, x_dwn, y_up, y_dwn, pitch: AXIS_REF;
	x_couple, y_couple: MC_GEARIN;
	x_couple_start: BOOL := TRUE;
	y_couple_start: BOOL := TRUE;

//	{attribute 'TcLinkTo' := '.bLimFwd:=TIIB[y_up]^STM Status^Status^Digital input 1; .bLimBwd:=TIIB[y_up]^STM Status^Status^Digital input 2; .bSTO:=TIIB[di]^Channel 1^Input'}	
	{attribute 'TcLinkTo':='.bLimFwd:=TIIB[y_up]^STM Status^Status^Digital input 1'}		
    M1: DUT_MotionStage:=(nEnableMode:=0);
//	{attribute 'TcLinkTo' := '.bLimFwd:=TIIB[y_dwn]^STM Status^Status^Digital input 1; .bLimBwd:=TIIB[y_dwn]^STM Status^Status^Digital input 2'}
	M2: DUT_MotionStage:=(nEnableMode:=0);		
//	{attribute 'TcLinkTo' := '.bLimFwd:=TIIB[x_up]^STM Status^Status^Digital input 1; .bLimBwd:=TIIB[x_up]^STM Status^Status^Digital input 2'}	
	M3: DUT_MotionStage:=(nEnableMode:=0);
//	{attribute 'TcLinkTo' := '.bLimFwd:=TIIB[x_dwn]^STM Status^Status^Digital input 1; .bLimBwd:=TIIB[x_dwn]^STM Status^Status^Digital input 2'}
	M4: DUT_MotionStage:=(nEnableMode:=0);
//	{attribute 'TcLinkTo' := '.bLimFwd:=TIIB[pitch]^STM Status^Status^Digital input 1; .bLimBwd:=TIIB[pitch]^STM Status^Status^Digital input 2'}	
	M5: DUT_MotionStage;
	
	fbMotionStage_x_up, fbMotionStage_x_dwn, fbMotionStage_y_up, fbMotionStage_y_dwn, fbMotionStage_pitch : FB_MotionStage;
	
	enable: BOOL := TRUE;
	sto AT %I*: BOOL;
	x_position, y_position: LREAL;
	x_velocity: LREAL := 0.2;
	y_velocity: LREAL :=0.05;
	
	dx, dy: LREAL;		
	{attribute 'TcLinkTo' := '.Count:=TIIB[1-x_up_2-x_dwn]^FB Inputs Channel 1^Position'}	
	x_up_enc  AT %I*: ST_RenishawAbsEnc;
	{attribute 'TcLinkTo' := '.Count:=TIIB[1-x_up_2-x_dwn]^FB Inputs Channel 2^Position'}
	x_dwn_enc  AT %I*: ST_RenishawAbsEnc;
	
	{attribute 'TcLinkTo' := '.Count:=TIIB[1-y_up_2-y_dwn]^FB Inputs Channel 1^Position'}	
	y_up_enc  AT %I*: ST_RenishawAbsEnc;
	{attribute 'TcLinkTo' := '.Count:=TIIB[1-y_up_2-y_dwn]^FB Inputs Channel 2^Position'}
	y_dwn_enc  AT %I*: ST_RenishawAbsEnc:=(Ref:=0);

	x_limit_gantry, y_limit_gantry: FB_GantryDiffVirtualLimitSwitch;

	x_start, y_start: BOOL;

	// Decouple Axes when gantry too large
	GantryDiffY : LINT;
	GantryDiffX : LINT;
	decoupleY : MC_GEAROUT;
	decoupleX : MC_GEAROUT;
	stop_axis : MC_HALT;
	bExecuteDecoupleY : BOOL;
	bExecuteDecoupleX : BOOL;
	bStopAxisY : BOOL;
	bStopAxisX : BOOL;
	bGantryFixModeY : BOOL;
	bGantryFixModeX : BOOL;
	
	// Fwd/Bwd Enables to monitor:
	bM1Fwd : BOOL;
	bM1Bwd : BOOL;
	bM2Fwd : BOOL;
	bM2Bwd : BOOL;
	
	// Encoder fudge factor to simulate gantry difference
	fEncFudgeFactor : REAL := 1.005;
	
	fbGantryFixRTRIG: R_TRIG;
	// Set true once all axes initialize and couple as needed.
	xInitComplete: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Fwd/Bwd Enables to monitor:
bM1Fwd := M1.bLimAllFwd;
bM1Bwd := M1.bLimAllBwd;
bM2Fwd := M2.bLimAllFwd;
bM2Bwd := M2.bLimAllBwd;

// Startup Parameters while Testing/Debugging:
sto := TRUE;
//M1.bLimFwd := TRUE;
//M1.bLimBwd := TRUE;
M1.bGantryAxis := TRUE;
M1.fGantryTol := 100;
M1.nCommand := 3;
//M2.bLimFwd := TRUE;
//M2.bLimBwd := TRUE;
M2.bGantryAxis := TRUE;
M2.fGantryTol := 200;
M3.bGantryAxis := TRUE;
M3.fGantryTol := 100;
M3.nCommand := 3;
M4.bGantryAxis := TRUE;
M4.fGantryTol := 100;

// Pretend Encoder counts
y_up_enc.Count := LREAL_TO_ULINT(M1.stAxisStatus.fActPosition * EXPT(10, 6));
y_dwn_enc.Count := LREAL_TO_ULINT(M2.stAxisStatus.fActPosition * fEncFudgeFactor * EXPT(10, 6));

// Pretend Encoder counts
x_up_enc.Count := LREAL_TO_ULINT(M3.stAxisStatus.fActPosition * EXPT(10, 6));
x_dwn_enc.Count := LREAL_TO_ULINT(M4.stAxisStatus.fActPosition * fEncFudgeFactor * EXPT(10, 6));

M1.bSTO := sto;
M2.bSTO := sto;
M3.bSTO := sto;
M4.bSTO := sto;

y_limit_gantry(PEnc:=y_up_enc, SEnc:=y_dwn_enc, GantDiffTol:=LREAL_TO_LINT(M1.fGantryTol),
				PLimFwd=>M1.bLimGntFwd, PLimBwd=>M1.bLimGntBwd,
				SLimFwd=>M2.bLimGntFwd, SLimBwd=>M2.bLimGntBwd
);




x_limit_gantry(PEnc:=x_up_enc, SEnc:=x_dwn_enc, GantDiffTol:=LREAL_TO_LINT(M3.fGantryTol),
				PLimFwd=>M3.bLimGntFwd, PLimBwd=>M3.bLimGntBwd,
				SLimFwd=>M4.bLimGntFwd, SLimBwd=>M4.bLimGntBwd
);

IF M4.Axis.Status.Coupled THEN
	M3.bLimGntFwd := M3.bLimGntFwd AND M4.bLimGntFwd;
	M4.bLimGntFwd := M3.bLimGntFwd AND M4.bLimGntFwd;
	
	M3.bLimGntBwd := M3.bLimGntBwd AND M4.bLimGntBwd;
	M4.bLimGntBwd := M3.bLimGntBwd AND M4.bLimGntBwd;
END_IF

fbMotionStage_y_up  (stMotionStage:=M1);
fbMotionStage_y_dwn (stMotionStage:=M2);
fbMotionStage_x_up  (stMotionStage:=M3);
fbMotionStage_x_dwn (stMotionStage:=M4);
fbMotionStage_pitch (stMotionStage:=M5);
	

	dx := M3.Axis.NcToPlc.ActPos - M4.Axis.NcToPlc.ActPos;
	dy := M1.Axis.NcToPlc.ActPos - M2.Axis.NcToPlc.ActPos;

	
// Auto-coupling at init and auto-reset of coupling boolean	
x_couple_start S= NOT xInitComplete;	
	
x_couple_start R= x_couple.Busy OR NOT M3.Axis.Status.StandStill OR NOT M4.axis.Status.StandStill;	
x_couple ( Master:=M3.Axis, Slave:=M4.Axis, Execute:=(x_couple_start));

xInitComplete S= M4.Axis.Status.Coupled;

// Decoupling with auto-reset of decouple boolean
bExecuteDecoupleX R= decoupleX.Busy OR NOT M3.Axis.Status.StandStill OR NOT M4.axis.Status.StandStill;
decoupleX( Slave:=M4.Axis, Execute:=bExecuteDecoupleX );


y_couple ( Master:=M1.Axis, Slave:=M2.Axis, Execute:=(M1.bEnabled AND M2.bEnabled AND y_couple_start));	

// Make limit switches respect Gantry Motion and monitor gantry difference:
// Y Gantry
M1.bLimAllFwd := M1.bLimFwd AND ((M1.bLimGntFwd AND M2.bLimFwd) OR NOT M1.bGantryAxis);
M1.bLimAllBwd := M1.bLimBwd AND ((M1.bLimGntBwd AND M2.bLimBwd) OR NOT M1.bGantryAxis);
M2.bLimAllFwd := M2.bLimFwd AND ((M2.bLimGntFwd AND M1.bLimFwd) OR NOT M2.bGantryAxis);
M2.bLimAllBwd := M2.bLimBwd AND ((M2.bLimGntBwd AND M1.bLimBwd) OR NOT M2.bGantryAxis);
// X Gantry
M3.bLimAllFwd := M3.bLimFwd AND ((M3.bLimGntFwd AND M4.bLimFwd) OR NOT M3.bGantryAxis);
M3.bLimAllBwd := M3.bLimBwd AND ((M3.bLimGntBwd AND M4.bLimBwd) OR NOT M3.bGantryAxis);
M4.bLimAllFwd := M4.bLimFwd AND ((M4.bLimGntFwd AND M3.bLimFwd) OR NOT M4.bGantryAxis);
M4.bLimAllBwd := M4.bLimBwd AND ((M4.bLimGntBwd AND M3.bLimBwd) OR NOT M4.bGantryAxis);

GantryDiffY := ( ULINT_TO_LINT(y_up_enc.Count) - ULINT_TO_LINT(y_up_enc.Ref) ) - ( ULINT_TO_LINT(y_dwn_enc.Count) - ULINT_TO_LINT(y_dwn_enc.Ref) );
GantryDiffX := ( ULINT_TO_LINT(x_up_enc.Count) - ULINT_TO_LINT(x_up_enc.Ref) ) - ( ULINT_TO_LINT(x_dwn_enc.Count) - ULINT_TO_LINT(x_dwn_enc.Ref) );

IF ABS(GantryDiffY) > M1.fGantryTol AND NOT bGantryFixModeY THEN
	y_couple_start := FALSE;
	M1.bExecute := FALSE;
	M2.bExecute := FALSE;
	IF NOT M1.bBusy THEN // TODO: Shold check if M2 also busy, not properly resetting due to being slave axis
		bExecuteDecoupleY := TRUE;
		bStopAxisY := TRUE;
		decoupleY( Slave:=M2.Axis, Execute:=bExecuteDecoupleY );
		stop_axis( Axis:=M2.Axis, Execute:=bStopAxisY );
		stop_axis( Axis:=M1.Axis, Execute:=bStopAxisY );
	END_IF
END_IF

fbGantryFixRTRIG(CLK:=bGantryFixModeY);
IF fbGantryFixRTRIG.Q THEN
	M1.bReset := TRUE;
	M2.bReset := TRUE;
	bStopAxisY := FALSE;
	bExecuteDecoupleY := FALSE;
END_IF
(*
IF ABS(GantryDiffX) > M3.fGantryTol AND NOT bGantryFixModeX THEN
	x_couple_start := FALSE;
	M3.bExecute := FALSE;
	M4.bExecute := FALSE;
	IF NOT M3.bBusy THEN // TODO: Shold check if M4 also busy, not properly resetting due to being slave axis
		bExecuteDecoupleX := TRUE;
		bStopAxisX := TRUE;
		decoupleX( Slave:=M4.Axis, Execute:=bExecuteDecoupleX );
		stop_axis( Axis:=M4.Axis, Execute:=bStopAxisX );
		stop_axis( Axis:=M3.Axis, Execute:=bStopAxisX );
	END_IF
END_IF

fbGantryFixRTRIG(CLK:=bGantryFixModeX);
IF fbGantryFixRTRIG.Q THEN
	M3.bReset := TRUE;
	M4.bReset := TRUE;
	bStopAxisX := FALSE;
	bExecuteDecoupleX := FALSE;
END_IF

*)]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="182" Count="3" />
      <LineId Id="252" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="259" Count="5" />
      <LineId Id="592" Count="4" />
      <LineId Id="180" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="598" Count="2" />
      <LineId Id="597" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="49" Count="8" />
      <LineId Id="672" Count="0" />
      <LineId Id="670" Count="1" />
      <LineId Id="58" Count="4" />
      <LineId Id="689" Count="3" />
      <LineId Id="695" Count="0" />
      <LineId Id="693" Count="1" />
      <LineId Id="688" Count="0" />
      <LineId Id="63" Count="9" />
      <LineId Id="696" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="680" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="698" Count="2" />
      <LineId Id="679" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="560" Count="3" />
      <LineId Id="559" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="267" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="329" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="566" Count="20" />
      <LineId Id="2" Count="0" />
      <LineId Id="687" Count="0" />
      <LineId Id="686" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>